{"version":3,"sources":["components/adminPanel/img/mainImgExample.png","components/adminPanel/AdminPanelComponents/adminWorkSpace/NewWorkComponents/Forms/HeaderCreateWorkForm.jsx","components/adminPanel/AdminPanelComponents/adminWorkSpace/NewWorkComponents/HeaderOfWork.jsx","components/adminPanel/AdminPanelComponents/adminWorkSpace/NewWorkComponents/Forms/OverviewStylesForm.jsx","components/adminPanel/AdminPanelComponents/adminWorkSpace/NewWorkComponents/Forms/OverviewUpdateWorkTitleForm.jsx","components/adminPanel/AdminPanelComponents/adminWorkSpace/NewWorkComponents/Forms/OverviewUpdateFontNameForm.jsx","components/adminPanel/AdminPanelComponents/adminWorkSpace/NewWorkComponents/WorkOverviewEdit.jsx","components/adminPanel/AdminPanelComponents/adminWorkSpace/NewWorkComponents/Forms/DetailesWhatIDidForm.jsx","components/adminPanel/AdminPanelComponents/adminWorkSpace/NewWorkComponents/Forms/DetailesTypeofWorkForm.jsx","components/adminPanel/AdminPanelComponents/adminWorkSpace/NewWorkComponents/Forms/DetailesTechnologiesForm.jsx","components/adminPanel/AdminPanelComponents/adminWorkSpace/NewWorkComponents/WorkDetailesEdit.jsx","components/adminPanel/AdminPanelComponents/adminWorkSpace/NewWorkComponents/WorkImagesEdit.jsx","components/adminPanel/AdminPanelComponents/adminWorkSpace/NewWorkComponents/FilePondWorks.js","components/adminPanel/AdminPanelComponents/adminWorkSpace/WorkSpaceNewWork.jsx","components/adminPanel/AdminPanelComponents/adminWorkSpace/WorkSpaceNewWorkContainer.js"],"names":["module","exports","CreateNewWorkItem","reduxForm","form","props","className","onSubmit","handleSubmit","Field","placeholder","name","component","HeaderOFWork","workBackArr","images","forEach","ImgData","type","push","imgSrc","imgType","img","toString","mainBackground","backImage","allWorks","length","background","style","undefined","boxShadow","createWorkItem","UpdateWorkStyles","fontSizesArray","i","fontSizeOption","map","size","key","UpdateWorkTitle","aboutProject","UpdateWorkFontName","fontName","WorkOverviewEdit","workColors","colors","color","_id","workStyle","textStyles","fontSize","fontWeight","weight","updateWorkItem","createWorkStyle","onChange","onColorChange","onClick","createWorkColor","SetDidPoint","whatIDid","point","setChangedPoint","SetTypeOfWork","smallDescription","SetTechnologies","technologyUsed","WorkDetailsEdit","createWorkDidPoint","WorkImagesEdit","MobileArr","DesktopArr","filter","DesktopImg","num","src","alt","descr","MobileImg","BlockTitle","titleclassName","blockTitleText","workName","registerPlugin","FilePondPluginImageExifOrientation","FilePondPluginImagePreview","FilePondPluginFileEncode","FilePondPluginImageResize","FilePondWorks","useState","files","setFiles","input","setInput","currentId","currentWorkId","action","method","htmlFor","e","currentTarget","value","id","setOptions","stylePanelAspectRatio","imageResizeTargetWidth","imageResizeTargetHight","onupdatefiles","allowMultiple","maxFiles","labelIdle","loading","WorkSpaceNewWork","workPhotoArr","mainImg","onPointChange","connect","state","token","admin","works","setColor","setWhatIDid","setWork","setWorkId","setStyle","setImagesData","useHttp","request","useEffect","a","worksData","worksColors","worksStyles","getLastWorkData","formData","urlAdress","workTitle"],"mappings":"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","file":"static/js/9.7c6882d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mainImgExample.35b89773.png\";","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\n\r\nconst HeaderCreateWorkForm = (props) => {\r\n  return (\r\n    <form className=\"workIntroTextEdit wrapper\" onSubmit={props.handleSubmit}>\r\n      <div className=\"editTitlesInput\">\r\n        <Field placeholder=\"Name of Work\" name=\"workName\" component=\"input\" />\r\n        <Field placeholder=\"URL of the work\" name=\"urlAdress\" component=\"input\" />\r\n        <Field placeholder=\"Main website link\" name=\"onlineUrl\" component=\"input\" />\r\n        <Field placeholder=\"Set Background color\" name=\"background\" component=\"input\" />\r\n        <Field placeholder=\"Description of work\" name=\"workTitle\" component=\"textarea\" />\r\n        <div className=\"buttonPage whiteBtn\">\r\n          <button>Create Work</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst CreateNewWorkItem = reduxForm({ form: \"createNewWork\" })(HeaderCreateWorkForm);\r\n\r\nexport default CreateNewWorkItem;\r\n","import React from \"react\";\r\nimport mainBackground from \"../../../img/mainBackgroundExample.jpg\";\r\nimport CreateNewWorkItem from \"./Forms/HeaderCreateWorkForm\";\r\n\r\nconst HeaderOFWork = (props) => {\r\n  const workBackArr = [];\r\n  props.images.forEach((ImgData) => {\r\n    if (ImgData.type === \"workBackground\") {\r\n      workBackArr.push(ImgData);\r\n    }\r\n  });\r\n  const imgSrc = workBackArr[0]\r\n    ? `data:${workBackArr[0].imgType};charset=utf-8;base64,${workBackArr[0].img.toString(\"base64\")}`\r\n    : mainBackground;\r\n\r\n  const backImage =\r\n    props.allWorks[props.allWorks.length - 1] &&\r\n    props.allWorks[props.allWorks.length - 1].background;\r\n  return (\r\n    <header\r\n      className=\"workHeader\"\r\n      style={{\r\n        background: workBackArr[0] !== undefined ? \"url(\" + imgSrc + \")\" : backImage,\r\n        boxShadow: workBackArr[0] !== undefined && \"0px 4px 10px rgba(0, 0, 0, 0.25)\",\r\n      }}\r\n    >\r\n      <div className=\"workIntro workIntroEdit\">\r\n        <CreateNewWorkItem onSubmit={props.createWorkItem} />\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default HeaderOFWork;\r\n","import React from \"react\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\n\r\nconst OverviewStylesForm = (props) => {\r\n  let fontSizesArray = [];\r\n  for (let i = 0; i < 90; i++) {\r\n    fontSizesArray.push(i);\r\n  }\r\n  let fontSizeOption = fontSizesArray.map((size) => {\r\n    return <option key={size}>{size}</option>;\r\n  });\r\n  return (\r\n    <form onSubmit={props.handleSubmit} className=\"editInput editTextStyles\">\r\n      <div className=\"editOverviewDataInput\">\r\n        <Field placeholder=\"Write style\" name=\"name\" component=\"input\" />\r\n      </div>\r\n      <div className=\"editFontStyle\">\r\n        <Field name=\"weight\" component=\"select\">\r\n          <option></option>\r\n          <option>Light</option>\r\n          <option>Regular</option>\r\n          <option>Bold</option>\r\n        </Field>\r\n      </div>\r\n      <div className=\"editFontStyle\">\r\n        <Field name=\"size\" component=\"select\">\r\n          {fontSizeOption}\r\n        </Field>\r\n      </div>\r\n\r\n      <button>add</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst UpdateWorkStyles = reduxForm({ form: \"updateStyles\" })(OverviewStylesForm);\r\n\r\nexport default UpdateWorkStyles;\r\n","import React from \"react\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\n\r\nconst OverviewUpdateWorkTitleForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit} className=\"workTitle\">\r\n      <h2>ABOUT PROJECT</h2>\r\n      <p>\r\n        {props.allWorks[props.allWorks.length - 1] &&\r\n          props.allWorks[props.allWorks.length - 1].aboutProject}\r\n      </p>\r\n      <div className=\"editAboutProject\">\r\n        <Field placeholder=\"About project\" name=\"aboutProject\" component=\"textarea\" />\r\n        <button>save</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst UpdateWorkTitle = reduxForm({ form: \"updateStyles\" })(OverviewUpdateWorkTitleForm);\r\n\r\nexport default UpdateWorkTitle;\r\n","import React from \"react\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\n\r\nconst OverviewUpdateFontNameForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit} className=\"workTypography\">\r\n      <h2>Typography</h2>\r\n      <p>\r\n        {props.allWorks[props.allWorks.length - 1] &&\r\n          props.allWorks[props.allWorks.length - 1].fontName}\r\n      </p>\r\n      <div className=\"editInput\">\r\n        <div className=\"editOverviewDataInput\">\r\n          <Field placeholder=\"Font Name\" name=\"fontName\" component=\"input\" />\r\n        </div>\r\n        <button>save</button>\r\n      </div>\r\n      <p>ABCDEFGIJKLMNOPQRSTUVWXYZ</p>\r\n      <p>abcdefgijklmnopqrstuvwxyz</p>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst UpdateWorkFontName = reduxForm({ form: \"updateFontName\" })(OverviewUpdateFontNameForm);\r\n\r\nexport default UpdateWorkFontName;\r\n","import React from \"react\";\r\nimport UpdateWorkStyles from \"./Forms/OverviewStylesForm\";\r\nimport UpdateWorkTitle from \"./Forms/OverviewUpdateWorkTitleForm\";\r\nimport UpdateWorkFontName from \"./Forms/OverviewUpdateFontNameForm\";\r\n\r\nconst WorkOverviewEdit = (props) => {\r\n  let workColors =\r\n    props.allWorks[props.allWorks.length - 1] &&\r\n    props.allWorks[props.allWorks.length - 1].colors &&\r\n    props.allWorks[props.allWorks.length - 1].colors.map((color) => {\r\n      return (\r\n        <div key={color._id} className=\"colorEllipse\" style={{ background: color.color }}></div>\r\n      );\r\n    });\r\n\r\n  let workStyle =\r\n    props.allWorks[props.allWorks.length - 1] &&\r\n    props.allWorks[props.allWorks.length - 1].textStyles &&\r\n    props.allWorks[props.allWorks.length - 1].textStyles.map((style) => {\r\n      return (\r\n        <p\r\n          key={style._id}\r\n          className=\"workStyle\"\r\n          style={{ fontSize: style.size + \"px\", fontWeight: style.weight }}\r\n        >\r\n          {style.name}\r\n        </p>\r\n      );\r\n    });\r\n\r\n  return (\r\n    <div className=\"workOverview\">\r\n      <UpdateWorkTitle allWorks={props.allWorks} onSubmit={props.updateWorkItem} />\r\n      <div className=\"designInfo\">\r\n        <UpdateWorkFontName onSubmit={props.updateWorkItem} allWorks={props.allWorks} />\r\n        <div className=\"workStyles\">\r\n          <h2>Text styles</h2>\r\n          {workStyle}\r\n          <UpdateWorkStyles onSubmit={props.createWorkStyle} />\r\n        </div>\r\n        <div className=\"workColors\">\r\n          <h2>Colors</h2>\r\n          <div className=\"colorEllipses\">{workColors}</div>\r\n          <div className=\"editInput editEllipseColor\">\r\n            <input onChange={props.onColorChange} name=\"newColorData\" type=\"color\" />\r\n            <button onClick={props.createWorkColor}>add</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorkOverviewEdit;\r\n","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\n\r\nconst DetailesWhatIDidForm = (props) => {\r\n  let whatIDid =\r\n    props.allWorks[props.allWorks.length - 1] &&\r\n    props.allWorks[props.allWorks.length - 1].whatIDid &&\r\n    props.allWorks[props.allWorks.length - 1].whatIDid.map((point) => {\r\n      return <p key={point._id}> {point.name}</p>;\r\n    });\r\n\r\n  return (\r\n    <form className=\"detailsInfo\" onSubmit={props.handleSubmit}>\r\n      <h3>WHAT I DID</h3>\r\n      {whatIDid}\r\n      <div className=\"editInput\">\r\n        <Field placeholder=\"What i did\" name=\"newPoint\" component=\"input\" />\r\n        <button onClick={props.setChangedPoint}>add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst SetDidPoint = reduxForm({ form: \"createDidPoint\" })(DetailesWhatIDidForm);\r\n\r\nexport default SetDidPoint;\r\n","import React from \"react\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\n\r\nconst DetailesTypeOfWorkForm = (props) => {\r\n  return (\r\n    <form className=\"detailsInfo\" onSubmit={props.handleSubmit}>\r\n      <h3>PROJECT TYPE</h3>\r\n      <p>\r\n        {props.allWorks[props.allWorks.length - 1] &&\r\n          props.allWorks[props.allWorks.length - 1].smallDescription}\r\n      </p>\r\n      <div className=\"editInput\">\r\n        <Field placeholder=\"Type of project\" name=\"smallDescription\" component=\"input\" />\r\n        <button>add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst SetTypeOfWork = reduxForm({ form: \"updateTypeOfWork\" })(DetailesTypeOfWorkForm);\r\n\r\nexport default SetTypeOfWork;\r\n","import React from \"react\";\r\nimport { reduxForm, Field } from \"redux-form\";\r\n\r\nconst DetailesTechnologiesForm = (props) => {\r\n  return (\r\n    <form className=\"detailsInfo\" onSubmit={props.handleSubmit}>\r\n      <h3>TECHNOLOGY USED</h3>\r\n      <p>\r\n        {props.allWorks[props.allWorks.length - 1] &&\r\n          props.allWorks[props.allWorks.length - 1].technologyUsed}\r\n      </p>\r\n      <div className=\"editInput\">\r\n        <Field placeholder=\"Used technologies\" name=\"technologyUsed\" component=\"textarea\" />\r\n        <button>add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst SetTechnologies = reduxForm({ form: \"updateTechnologies\" })(DetailesTechnologiesForm);\r\n\r\nexport default SetTechnologies;\r\n","import React from \"react\";\r\nimport SetDidPoint from \"./Forms/DetailesWhatIDidForm\";\r\nimport SetTypeOfWork from \"./Forms/DetailesTypeofWorkForm\";\r\nimport SetTechnologies from \"./Forms/DetailesTechnologiesForm\";\r\n\r\nconst WorkDetailsEdit = (props) => {\r\n  return (\r\n    <div className=\"workDetails\">\r\n      <SetTypeOfWork allWorks={props.allWorks} onSubmit={props.updateWorkItem} />\r\n      <SetDidPoint allWorks={props.allWorks} onSubmit={props.createWorkDidPoint} />\r\n      <SetTechnologies allWorks={props.allWorks} onSubmit={props.updateWorkItem} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorkDetailsEdit;\r\n","import React from \"react\";\r\nimport BlockTitleText from \"../../../../../common/BlockTitle\";\r\n\r\nconst WorkImagesEdit = (props) => {\r\n  const MobileArr = [];\r\n  const DesktopArr = [];\r\n  if (props.images.length !== 0) {\r\n    props.images\r\n      .filter((ImgData) => ImgData.type === \"mobileImg\")\r\n      .map((ImgData) => {\r\n        MobileArr.push(ImgData);\r\n      });\r\n    props.images\r\n      .filter((ImgData) => ImgData.type === \"desktopImg\")\r\n      .map((ImgData) => {\r\n        DesktopArr.push(ImgData);\r\n      });\r\n  }\r\n\r\n  const DesktopImg = (num) => {\r\n    if (DesktopArr.length !== 0 && DesktopArr.length >= num + 1) {\r\n      const imgSrc = `data:${DesktopArr[num].imgType};charset=utf-8;base64,${DesktopArr[\r\n        num\r\n      ].img.toString(\"base64\")}`;\r\n      return (\r\n        <div>\r\n          <img src={imgSrc} alt={DesktopArr[num].descr}></img>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <p>don't have img</p>;\r\n    }\r\n  };\r\n\r\n  const MobileImg = (num) => {\r\n    if (MobileArr.length !== 0 && MobileArr.length >= num + 1) {\r\n      const imgSrc = `data:${MobileArr[num].imgType};charset=utf-8;base64,${MobileArr[\r\n        num\r\n      ].img.toString(\"base64\")}`;\r\n      return (\r\n        <div>\r\n          <img src={imgSrc} alt={MobileArr[num].descr}></img>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <p>don't have img</p>;\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"workScreenshots wrapper\">\r\n      <BlockTitleText titleclassName=\"titleLines titleLines3\" blockTitleText=\"desktop version\" />\r\n      <p className=\"sectionsParagraph\">\r\n        Main sections of the{\" \"}\r\n        {props.allWorks.length !== 0\r\n          ? props.allWorks[props.allWorks.length - 1].workName + \" \"\r\n          : '\"WorkName\"'}\r\n        {props.allWorks.length !== 0\r\n          ? props.allWorks[props.allWorks.length - 1].smallDescription\r\n          : '\"WorkType\"'}\r\n        . <br />\r\n        Display on the desktop version.\r\n      </p>\r\n\r\n      <table className=\"desktopScreenshots\">\r\n        <tbody>\r\n          <tr>\r\n            <td className=\"desktopScreenshotsRow\">{DesktopImg(0)}</td>\r\n            <td className=\"desktopScreenshotsRow\">{DesktopImg(1)}</td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"desktopScreenshotsRow\">{DesktopImg(2)}</td>\r\n            <td className=\"desktopScreenshotsRow\">{DesktopImg(3)}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <div className=\"mobileVersionSection\">\r\n        <BlockTitleText titleclassName=\"titleLines titleLines3\" blockTitleText=\"mobile version\" />\r\n        <p className=\"sectionsParagraph\">\r\n          Main sections of the{\" \"}\r\n          {props.allWorks.length !== 0\r\n            ? props.allWorks[props.allWorks.length - 1].workName + \" \"\r\n            : '\"WorkName\"  '}\r\n          {props.allWorks.length !== 0\r\n            ? props.allWorks[props.allWorks.length - 1].smallDescription\r\n            : '\"WorkType\"'}\r\n          . <br />\r\n          Display on the mobile version.\r\n        </p>\r\n\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td className=\"mobileScreenshotsRow\">{MobileImg(0)}</td>\r\n              <td className=\"mobileScreenshotsRow\">{MobileImg(1)}</td>\r\n              <td className=\"mobileScreenshotsRow\">{MobileImg(2)}</td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"mobileScreenshotsRow\">{MobileImg(3)}</td>\r\n              <td className=\"mobileScreenshotsRow\">{MobileImg(4)}</td>\r\n              <td className=\"mobileScreenshotsRow\">{MobileImg(5)}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorkImagesEdit;\r\n","import React, { useState } from \"react\";\r\n\r\n// Import React FilePond\r\nimport { FilePond, registerPlugin } from \"react-filepond\";\r\n\r\n// Import FilePond styles\r\nimport \"filepond/dist/filepond.min.css\";\r\n\r\nimport FilePondPluginImageExifOrientation from \"filepond-plugin-image-exif-orientation\";\r\nimport FilePondPluginImagePreview from \"filepond-plugin-image-preview\";\r\nimport FilePondPluginFileEncode from \"filepond-plugin-file-encode\";\r\nimport FilePondPluginImageResize from \"filepond-plugin-image-resize\";\r\nimport \"filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css\";\r\n\r\n// Register the plugins\r\nregisterPlugin(\r\n  FilePondPluginImageExifOrientation,\r\n  FilePondPluginImagePreview,\r\n  FilePondPluginFileEncode,\r\n  FilePondPluginImageResize\r\n);\r\n\r\nconst FilePondWorks = (props) => {\r\n  const [files, setFiles] = useState([]);\r\n  const [input, setInput] = useState();\r\n  const inputOnChange = (e) => {\r\n    setInput(e.currentTarget.value);\r\n  };\r\n  const currentId = props.currentWorkId;\r\n  return (\r\n    <div className=\"filePondWorks wrapper\">\r\n      <form action={\"/api/works/addPhoto/\" + currentId} method=\"POST\">\r\n        <h2 className=\"editImageDataTitle\">Add image to work</h2>\r\n        <div className=\"editImgData\">\r\n          <div className=\"editInput imgInput\">\r\n            <label htmlFor=\"name\">Name: </label>\r\n            <input type=\"text\" name=\"name\" />\r\n          </div>\r\n          <div className=\"editInput imgInput\">\r\n            <label htmlFor=\"descr\">Description: </label>\r\n            <input type=\"text\" name=\"descr\" />\r\n          </div>\r\n          {props.allWorks !== undefined || props.allWorks !== null ? (\r\n            <div className=\"editInput imgInput hideInput\">\r\n              <label htmlFor=\"owner\">Owner: </label>\r\n              <input type=\"text\" name=\"owner\" onChange={inputOnChange} value={input} />\r\n            </div>\r\n          ) : null}\r\n          <div className=\"editFontStyle\">\r\n            <label htmlFor=\"type\">Type: </label>\r\n            <select name=\"type\" id=\"\">\r\n              <option value=\"workPhoto\">workPhoto</option>\r\n              <option value=\"workPreview\">workPreview</option>\r\n              <option value=\"workBackground\">workBackground</option>\r\n              <option value=\"desktopImg\">desktopImg</option>\r\n              <option value=\"mobileImg\">mobileImg</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"filePondArea\">\r\n          <FilePond\r\n            setOptions={{\r\n              stylePanelAspectRatio: 150 / 100,\r\n              imageResizeTargetWidth: 100,\r\n              imageResizeTargetHight: 150,\r\n            }}\r\n            files={files}\r\n            onupdatefiles={setFiles}\r\n            allowMultiple={false}\r\n            maxFiles={1}\r\n            name=\"img\"\r\n            labelIdle='Drag & Drop your files or <span class=\"filepond--label-action\">Browse</span>'\r\n          />\r\n          <div className=\"buttonPage\">\r\n            <button type=\"submit\">Save</button>\r\n          </div>\r\n        </div>\r\n        <div>{props.loading ? \"loading...\" : null}</div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilePondWorks;\r\n","import React from \"react\";\r\nimport \"../../Admin.css\";\r\nimport mainImg from \"../../img/mainImgExample.png\";\r\nimport HeaderOFWork from \"./NewWorkComponents/HeaderOfWork\";\r\nimport WorkOverviewEdit from \"./NewWorkComponents/WorkOverviewEdit\";\r\nimport WorkDetailsEdit from \"./NewWorkComponents/WorkDetailesEdit\";\r\nimport WorkImagesEdit from \"./NewWorkComponents/WorkImagesEdit\";\r\nimport FilePondWorks from \"./NewWorkComponents/FilePondWorks\";\r\n\r\nconst WorkSpaceNewWork = (props) => {\r\n  const workPhotoArr = [];\r\n  props.images.forEach((ImgData) => {\r\n    if (ImgData.type === \"workPhoto\") {\r\n      workPhotoArr.push(ImgData);\r\n    }\r\n  });\r\n  const imgSrc =\r\n    workPhotoArr[0] &&\r\n    `data:${workPhotoArr[0].imgType};charset=utf-8;base64,${workPhotoArr[0].img.toString(\r\n      \"base64\"\r\n    )}`;\r\n  return (\r\n    <div>\r\n      <HeaderOFWork \r\n        images={props.images}\r\n        allWorks={props.allWorks}\r\n        createWorkItem={props.createWorkItem}\r\n        updateWorkItem={props.updateWorkItem}\r\n      />\r\n      <div className=\"workDescriber\">\r\n        <div className=\"workMainLogo\">\r\n          <img src={imgSrc || mainImg} alt={workPhotoArr[0] && workPhotoArr[0].descr} />\r\n        </div>\r\n        <div className=\"workMainInfo wrapper\">\r\n          <WorkOverviewEdit\r\n            allWorks={props.allWorks}\r\n            createWorkColor={props.createWorkColor}\r\n            createWorkStyle={props.createWorkStyle}\r\n            onColorChange={props.onColorChange}\r\n            updateWorkItem={props.updateWorkItem}\r\n          />\r\n          <WorkDetailsEdit\r\n            allWorks={props.allWorks}\r\n            onPointChange={props.onPointChange}\r\n            createWorkDidPoint={props.createWorkDidPoint}\r\n            updateWorkItem={props.updateWorkItem}\r\n          />\r\n        </div>\r\n      </div>\r\n      <FilePondWorks loading={props.loading} allWorks={props.allWorks} currentWorkId={props.currentWorkId}/>\r\n      <WorkImagesEdit allWorks={props.allWorks} images={props.images} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorkSpaceNewWork;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport WorkSpaceNewWork from \"./WorkSpaceNewWork\";\r\nimport {\r\n  setColor,\r\n  setWhatIDid,\r\n  setWork,\r\n  setWorkId,\r\n  setStyle,\r\n  setImagesData,\r\n} from \"../../../../Redux/WorksReducer\";\r\nimport { useHttp } from \"../../../../hooks/http.hook\";\r\n\r\nconst WorkSpaceNewWorkContainer = (props) => {\r\n  const { loading, request } = useHttp();\r\n  useEffect(() => {\r\n    const getLastWorkData = async () => {\r\n      const worksData = await request(\"/api/works\", \"GET\", null);\r\n      props.setWork(worksData);\r\n      if (props.allWorks.length !== 0) {\r\n        const currentWorkId = await worksData[worksData.length - 1]._id;\r\n        props.setWorkId(currentWorkId);\r\n        const worksColors = await request(`/api/works/colors/${currentWorkId}`, \"GET\", null);\r\n        props.setColor(worksColors);\r\n        const worksStyles = await request(`/api/works/textStyles/${currentWorkId}`, \"GET\", null);\r\n        props.setStyle(worksStyles);\r\n        const whatIDid = await request(`/api/works/didPoint/${currentWorkId}`, \"GET\", null);\r\n        props.setWhatIDid(whatIDid);\r\n        const images = await request(`/api/works/getPhotos/${currentWorkId}`, \"GET\", null);\r\n        props.setImagesData(images);\r\n      }\r\n    };\r\n    getLastWorkData();\r\n  }, [props.allWorks.length]);\r\n\r\n  let [color, setColor] = useState(null);\r\n  const onColorChange = (e) => {\r\n    setColor(e.currentTarget.value);\r\n  };\r\n\r\n  const createWorkItem = async (formData) => {\r\n    try {\r\n      await request(\"/api/works/create\", \"POST\", {\r\n        ...formData,\r\n      });\r\n      const worksData = await request(\"/api/works\", \"GET\", null);\r\n      props.setWork(worksData);\r\n      formData.workName = \"\";\r\n      formData.urlAdress = \"\";\r\n      formData.workTitle = \"\";\r\n    } catch (e) {}\r\n  };\r\n\r\n  const updateWorkItem = async (formData) => {\r\n    try {\r\n      const worksData = await request(\"/api/works\", \"GET\", null);\r\n      const updatedData = await request(\r\n        `/api/works/${worksData[worksData.length - 1]._id}`,\r\n        \"PATCH\",\r\n        {\r\n          ...formData,\r\n        }\r\n      );\r\n    } catch (e) {}\r\n  };\r\n\r\n  const createWorkColor = async (formData) => {\r\n    try {\r\n      const worksData = await request(\"/api/works\", \"GET\", null);\r\n      const currentWorkId = worksData[worksData.length - 1]._id;\r\n      props.setWorkId(currentWorkId);\r\n      await request(\"/api/works/create-color\", \"POST\", {\r\n        id: currentWorkId,\r\n        color: color,\r\n      });\r\n    } catch (e) {}\r\n  };\r\n\r\n  const createWorkStyle = async (formData) => {\r\n    try {\r\n      const worksData = await request(\"/api/works\", \"GET\", null);\r\n      const currentWorkId = worksData[worksData.length - 1]._id;\r\n      props.setWorkId(currentWorkId);\r\n      await request(\"/api/works/create-textStyle\", \"POST\", {\r\n        id: currentWorkId,\r\n        ...formData,\r\n      });\r\n    } catch (e) {}\r\n  };\r\n\r\n  const createWorkDidPoint = async (formData) => {\r\n    try {\r\n      const worksData = await request(\"/api/works\", \"GET\", null);\r\n      const currentWorkId = worksData[worksData.length - 1]._id;\r\n      props.setWorkId(currentWorkId);\r\n      await request(\"/api/works/create-didPoint\", \"POST\", {\r\n        id: currentWorkId,\r\n        ...formData,\r\n      });\r\n    } catch (e) {}\r\n  };\r\n\r\n  return (\r\n    <WorkSpaceNewWork\r\n      images={props.images}\r\n      allWorks={props.allWorks}\r\n      //async req to server\r\n      updateWorkItem={updateWorkItem}\r\n      createWorkItem={createWorkItem}\r\n      createWorkColor={createWorkColor}\r\n      createWorkStyle={createWorkStyle}\r\n      createWorkDidPoint={createWorkDidPoint}\r\n      // my functions\r\n      onColorChange={onColorChange}\r\n      setImagesData={props.setImagesData}\r\n      currentWorkId={props.currentWorkId}\r\n      loading={loading}\r\n    />\r\n  );\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    token: state.admin.token,\r\n    allWorks: state.works.works,\r\n    images: state.works.images,\r\n    currentWorkId: state.works.currentWorkId,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  setColor,\r\n  setWhatIDid,\r\n  setWork,\r\n  setWorkId,\r\n  setStyle,\r\n  setImagesData,\r\n})(WorkSpaceNewWorkContainer);\r\n"],"sourceRoot":""}