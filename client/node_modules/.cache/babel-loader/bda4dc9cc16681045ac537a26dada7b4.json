{"ast":null,"code":"/*!\n * FilePondPluginImageResize 2.0.7\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.FilePondPluginImageResize = factory());\n})(this, function () {\n  'use strict'; // test if file is of type image\n\n  var isImage = function isImage(file) {\n    return /^image/.test(file.type);\n  };\n\n  var getImageSize = function getImageSize(url, cb) {\n    var image = new Image();\n\n    image.onload = function () {\n      var width = image.naturalWidth;\n      var height = image.naturalHeight;\n      image = null;\n      cb({\n        width: width,\n        height: height\n      });\n    };\n\n    image.onerror = function () {\n      return cb(null);\n    };\n\n    image.src = url;\n  };\n  /**\n   * Image Auto Resize Plugin\n   */\n\n\n  var plugin = function plugin(_ref) {\n    var addFilter = _ref.addFilter,\n        utils = _ref.utils;\n    var Type = utils.Type; // subscribe to file load and append required transformations\n\n    addFilter('DID_LOAD_ITEM', function (item, _ref2) {\n      var query = _ref2.query;\n      return new Promise(function (resolve, reject) {\n        // get file reference\n        var file = item.file; // if this is not an image we do not have any business cropping it\n\n        if (!isImage(file) || !query('GET_ALLOW_IMAGE_RESIZE')) {\n          // continue with the unaltered dataset\n          return resolve(item);\n        }\n\n        var mode = query('GET_IMAGE_RESIZE_MODE');\n        var width = query('GET_IMAGE_RESIZE_TARGET_WIDTH');\n        var height = query('GET_IMAGE_RESIZE_TARGET_HEIGHT');\n        var upscale = query('GET_IMAGE_RESIZE_UPSCALE'); // no resizing to be done\n\n        if (width === null && height === null) {\n          return resolve(item);\n        }\n\n        var targetWidth = width === null ? height : width;\n        var targetHeight = height === null ? targetWidth : height; // if should not upscale, we need to determine the size of the file\n\n        var fileURL = URL.createObjectURL(file);\n        getImageSize(fileURL, function (size) {\n          URL.revokeObjectURL(fileURL); // something went wrong\n\n          if (!size) return resolve(item);\n          var imageWidth = size.width,\n              imageHeight = size.height; // get exif orientation\n\n          var orientation = (item.getMetadata('exif') || {}).orientation || -1; // swap width and height if orientation needs correcting\n\n          if (orientation >= 5 && orientation <= 8) {\n            var _ref3 = [imageHeight, imageWidth];\n            imageWidth = _ref3[0];\n            imageHeight = _ref3[1];\n          } // image is already perfect size, no transformations required\n\n\n          if (imageWidth === targetWidth && imageHeight === targetHeight) {\n            return resolve(item);\n          } // image is smaller than target size but no upscaling is allowed\n\n\n          if (imageWidth <= targetWidth && imageHeight <= targetHeight && !upscale) {\n            return resolve(item);\n          } // the image needs to be resized\n\n\n          item.setMetadata('resize', {\n            mode: mode,\n            upscale: upscale,\n            size: {\n              width: targetWidth,\n              height: targetHeight\n            }\n          });\n          resolve(item);\n        });\n      });\n    }); // Expose plugin options\n\n    return {\n      options: {\n        // Enable or disable image resizing\n        allowImageResize: [true, Type.BOOLEAN],\n        // the method of rescaling\n        // - force => force set size\n        // - cover => pick biggest dimension\n        // - contain => pick smaller dimension\n        imageResizeMode: ['cover', Type.STRING],\n        // set to false to disable upscaling of image smaller than the target width / height\n        imageResizeUpscale: [true, Type.BOOLEAN],\n        // target width\n        imageResizeTargetWidth: [null, Type.INT],\n        // target height\n        imageResizeTargetHeight: [null, Type.INT]\n      }\n    };\n  }; // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n\n\n  var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n\n  if (isBrowser) {\n    document.dispatchEvent(new CustomEvent('FilePond:pluginloaded', {\n      detail: plugin\n    }));\n  }\n\n  return plugin;\n});","map":{"version":3,"sources":["C:/Users/jassem/Desktop/my_portfolio/node_modules/filepond-plugin-image-resize/dist/filepond-plugin-image-resize.js"],"names":["global","factory","exports","module","define","amd","self","FilePondPluginImageResize","isImage","file","test","type","getImageSize","url","cb","image","Image","onload","width","naturalWidth","height","naturalHeight","onerror","src","plugin","_ref","addFilter","utils","Type","item","_ref2","query","Promise","resolve","reject","mode","upscale","targetWidth","targetHeight","fileURL","URL","createObjectURL","size","revokeObjectURL","imageWidth","imageHeight","orientation","getMetadata","_ref3","setMetadata","options","allowImageResize","BOOLEAN","imageResizeMode","STRING","imageResizeUpscale","imageResizeTargetWidth","INT","imageResizeTargetHeight","isBrowser","window","document","dispatchEvent","CustomEvent","detail"],"mappings":"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","sourcesContent":["/*!\n * FilePondPluginImageResize 2.0.7\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n\n(function(global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined'\n    ? (module.exports = factory())\n    : typeof define === 'function' && define.amd\n    ? define(factory)\n    : ((global = global || self),\n      (global.FilePondPluginImageResize = factory()));\n})(this, function() {\n  'use strict';\n\n  // test if file is of type image\n  var isImage = function isImage(file) {\n    return /^image/.test(file.type);\n  };\n\n  var getImageSize = function getImageSize(url, cb) {\n    var image = new Image();\n    image.onload = function() {\n      var width = image.naturalWidth;\n      var height = image.naturalHeight;\n      image = null;\n      cb({ width: width, height: height });\n    };\n    image.onerror = function() {\n      return cb(null);\n    };\n    image.src = url;\n  };\n\n  /**\n   * Image Auto Resize Plugin\n   */\n  var plugin = function plugin(_ref) {\n    var addFilter = _ref.addFilter,\n      utils = _ref.utils;\n    var Type = utils.Type;\n\n    // subscribe to file load and append required transformations\n    addFilter('DID_LOAD_ITEM', function(item, _ref2) {\n      var query = _ref2.query;\n      return new Promise(function(resolve, reject) {\n        // get file reference\n        var file = item.file;\n\n        // if this is not an image we do not have any business cropping it\n        if (!isImage(file) || !query('GET_ALLOW_IMAGE_RESIZE')) {\n          // continue with the unaltered dataset\n          return resolve(item);\n        }\n\n        var mode = query('GET_IMAGE_RESIZE_MODE');\n        var width = query('GET_IMAGE_RESIZE_TARGET_WIDTH');\n        var height = query('GET_IMAGE_RESIZE_TARGET_HEIGHT');\n        var upscale = query('GET_IMAGE_RESIZE_UPSCALE');\n\n        // no resizing to be done\n        if (width === null && height === null) {\n          return resolve(item);\n        }\n\n        var targetWidth = width === null ? height : width;\n        var targetHeight = height === null ? targetWidth : height;\n\n        // if should not upscale, we need to determine the size of the file\n        var fileURL = URL.createObjectURL(file);\n        getImageSize(fileURL, function(size) {\n          URL.revokeObjectURL(fileURL);\n\n          // something went wrong\n          if (!size) return resolve(item);\n          var imageWidth = size.width,\n            imageHeight = size.height;\n\n          // get exif orientation\n          var orientation = (item.getMetadata('exif') || {}).orientation || -1;\n\n          // swap width and height if orientation needs correcting\n          if (orientation >= 5 && orientation <= 8) {\n            var _ref3 = [imageHeight, imageWidth];\n            imageWidth = _ref3[0];\n            imageHeight = _ref3[1];\n          }\n\n          // image is already perfect size, no transformations required\n          if (imageWidth === targetWidth && imageHeight === targetHeight) {\n            return resolve(item);\n          }\n\n          // image is smaller than target size but no upscaling is allowed\n          if (\n            imageWidth <= targetWidth &&\n            imageHeight <= targetHeight &&\n            !upscale\n          ) {\n            return resolve(item);\n          }\n\n          // the image needs to be resized\n          item.setMetadata('resize', {\n            mode: mode,\n            upscale: upscale,\n            size: {\n              width: targetWidth,\n              height: targetHeight\n            }\n          });\n\n          resolve(item);\n        });\n      });\n    });\n\n    // Expose plugin options\n    return {\n      options: {\n        // Enable or disable image resizing\n        allowImageResize: [true, Type.BOOLEAN],\n\n        // the method of rescaling\n        // - force => force set size\n        // - cover => pick biggest dimension\n        // - contain => pick smaller dimension\n        imageResizeMode: ['cover', Type.STRING],\n\n        // set to false to disable upscaling of image smaller than the target width / height\n        imageResizeUpscale: [true, Type.BOOLEAN],\n\n        // target width\n        imageResizeTargetWidth: [null, Type.INT],\n\n        // target height\n        imageResizeTargetHeight: [null, Type.INT]\n      }\n    };\n  };\n\n  // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n  var isBrowser =\n    typeof window !== 'undefined' && typeof window.document !== 'undefined';\n  if (isBrowser) {\n    document.dispatchEvent(\n      new CustomEvent('FilePond:pluginloaded', { detail: plugin })\n    );\n  }\n\n  return plugin;\n});\n"]},"metadata":{},"sourceType":"script"}