{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jassem\\\\Desktop\\\\my_portfolio\\\\client\\\\src\\\\components\\\\PortfolioPage\\\\PortfolioPageWorks\\\\WorkContainer.jsx\";\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport Work from \"./Work\";\nimport { compose } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { useHttp } from \"../../../hooks/http.hook\";\nimport { setColor, setWhatIDid, setWork, setWorkId, setWorkName, setStyle, setImagesData, uploadCurrentWorkComments } from \"../../../Redux/WorksReducer\";\n\nlet WorkContainer = props => {\n  // get data from url\n  let workName = props.match.params.workName;\n  props.setWorkName(workName);\n  const {\n    loading,\n    request\n  } = useHttp();\n  useEffect(() => {\n    const getLastWorkData = async () => {\n      if (props.currentWorkName === workName) {\n        // get all works data\n        const worksData = await request(`/api/works/getWork/${props.currentWorkName}`, \"GET\", null);\n        props.setWork(worksData);\n        props.setWorkId(worksData[0]._id); // get extended current work data\n\n        if (props.currentWorkId !== undefined && props.currentWorkId === worksData[0]._id) {\n          const worksColors = await request(`/api/works/colors/${props.currentWorkId}`, \"GET\", null);\n          props.setColor(worksColors);\n          const worksStyles = await request(`/api/works/textStyles/${props.currentWorkId}`, \"GET\", null);\n          props.setStyle(worksStyles);\n          const whatIDid = await request(`/api/works/didPoint/${props.currentWorkId}`, \"GET\", null);\n          props.setWhatIDid(whatIDid);\n          const images = await request(`/api/works/getPhotos/${props.currentWorkId}`, \"GET\", null);\n          props.setImagesData(images);\n          const workCommentsResponse = await request(`/api/works/getWorkComments/${props.currentWorkId}`, \"GET\", null);\n          props.uploadCurrentWorkComments(workCommentsResponse);\n        }\n      }\n    };\n\n    getLastWorkData();\n  }, [props.currentWorkId, props.currentWorkName]);\n  return /*#__PURE__*/React.createElement(Work, {\n    works: props.works,\n    images: props.images,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 10\n    }\n  });\n};\n\nlet mapStateToProps = state => {\n  return {\n    works: state.works.works,\n    images: state.works.images,\n    currentWorkId: state.works.currentWorkId,\n    currentWorkName: state.works.currentWorkName\n  };\n};\n\nexport default compose(connect(mapStateToProps, {\n  setColor,\n  setWhatIDid,\n  setWork,\n  setWorkId,\n  setWorkName,\n  setStyle,\n  setImagesData,\n  uploadCurrentWorkComments\n}), withRouter)(WorkContainer);","map":{"version":3,"sources":["C:/Users/jassem/Desktop/my_portfolio/client/src/components/PortfolioPage/PortfolioPageWorks/WorkContainer.jsx"],"names":["React","useEffect","connect","Work","compose","withRouter","useHttp","setColor","setWhatIDid","setWork","setWorkId","setWorkName","setStyle","setImagesData","uploadCurrentWorkComments","WorkContainer","props","workName","match","params","loading","request","getLastWorkData","currentWorkName","worksData","_id","currentWorkId","undefined","worksColors","worksStyles","whatIDid","images","workCommentsResponse","works","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Work from \"./Work\";\r\nimport { compose } from \"redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { useHttp } from \"../../../hooks/http.hook\";\r\nimport {\r\n  setColor,\r\n  setWhatIDid,\r\n  setWork,\r\n  setWorkId,\r\n  setWorkName,\r\n  setStyle,\r\n  setImagesData,\r\n  uploadCurrentWorkComments,\r\n} from \"../../../Redux/WorksReducer\";\r\n\r\nlet WorkContainer = (props) => {\r\n  // get data from url\r\n  let workName = props.match.params.workName;\r\n  props.setWorkName(workName);\r\n  const { loading, request } = useHttp();\r\n  useEffect(() => {\r\n    const getLastWorkData = async () => {\r\n      if (props.currentWorkName === workName) {\r\n        // get all works data\r\n        const worksData = await request(`/api/works/getWork/${props.currentWorkName}`, \"GET\", null);\r\n        props.setWork(worksData);\r\n        props.setWorkId(worksData[0]._id);\r\n        // get extended current work data\r\n        if (props.currentWorkId !== undefined && props.currentWorkId === worksData[0]._id) {\r\n          const worksColors = await request(\r\n            `/api/works/colors/${props.currentWorkId}`,\r\n            \"GET\",\r\n            null\r\n          );\r\n          props.setColor(worksColors);\r\n          const worksStyles = await request(\r\n            `/api/works/textStyles/${props.currentWorkId}`,\r\n            \"GET\",\r\n            null\r\n          );\r\n          props.setStyle(worksStyles);\r\n          const whatIDid = await request(`/api/works/didPoint/${props.currentWorkId}`, \"GET\", null);\r\n          props.setWhatIDid(whatIDid);\r\n          const images = await request(`/api/works/getPhotos/${props.currentWorkId}`, \"GET\", null);\r\n          props.setImagesData(images);\r\n          const workCommentsResponse = await request(\r\n            `/api/works/getWorkComments/${props.currentWorkId}`,\r\n            \"GET\",\r\n            null\r\n          );\r\n          props.uploadCurrentWorkComments(workCommentsResponse);\r\n        }\r\n      }\r\n    };\r\n    getLastWorkData();\r\n  }, [props.currentWorkId, props.currentWorkName]);\r\n\r\n  return <Work works={props.works} images={props.images} loading={loading} />;\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    works: state.works.works,\r\n    images: state.works.images,\r\n    currentWorkId: state.works.currentWorkId,\r\n    currentWorkName: state.works.currentWorkName,\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    setColor,\r\n    setWhatIDid,\r\n    setWork,\r\n    setWorkId,\r\n    setWorkName,\r\n    setStyle,\r\n    setImagesData,\r\n    uploadCurrentWorkComments,\r\n  }),\r\n  withRouter\r\n)(WorkContainer);\r\n"]},"metadata":{},"sourceType":"module"}