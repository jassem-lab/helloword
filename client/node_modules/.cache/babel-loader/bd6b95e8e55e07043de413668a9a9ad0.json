{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jassem\\\\Desktop\\\\hhh\\\\client\\\\src\\\\components\\\\BlogPage\\\\BlogPageComponents\\\\ArticleCommentsContainer.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport ArticleComments from \"./ArticleComments\";\nimport { uploadCurrentArticleComments, uploadCurrentCommentId } from \"../../../Redux/ArticlesReducer\";\nimport { useHttp } from \"../../../hooks/http.hook\";\n\nconst ArticleCommentsContainer = props => {\n  const {\n    request\n  } = useHttp();\n\n  const addArticleComment = async formData => {\n    try {\n      await request(\"/api/articles/createArticleComment\", \"POST\", { ...formData,\n        articleOwner: props.currentArticleId\n      });\n      const articleCommentsResponse = await request(`/api/articles/getArticleComments/${props.currentArticleId}`, \"GET\", null);\n      const comments = parseInt(props.articles[0].comments);\n      const plusLikeCounter = await request(`/api/articles/${props.currentArticleId}`, \"PATCH\", {\n        comments: comments ? comments + 1 : 1\n      });\n      props.uploadCurrentArticleComments(articleCommentsResponse);\n      formData.userName = \"\";\n      formData.CommentText = \"\";\n    } catch (e) {}\n  };\n\n  const addArticleCommentAnswer = async formData => {\n    try {\n      await request(\"/api/articles/createArticleComment\", \"POST\", { ...formData,\n        articleOwner: props.currentArticleId,\n        commentOwner: props.currentCommentId\n      });\n      const articleCommentsResponse = await request(`/api/articles/getArticleComments/${props.currentArticleId}`, \"GET\", null);\n      const comments = parseInt(props.articles[0].comments);\n      const plusLikeCounter = await request(`/api/articles/${props.currentArticleId}`, \"PATCH\", {\n        comments: comments ? comments + 1 : 1\n      });\n      props.uploadCurrentArticleComments(articleCommentsResponse);\n      props.uploadCurrentCommentId(null);\n    } catch (e) {}\n  };\n\n  const addAnswer = e => {\n    props.uploadCurrentCommentId(e.currentTarget.id);\n  };\n\n  return /*#__PURE__*/React.createElement(ArticleComments // props\n  , {\n    articleComments: props.articleComments,\n    currentCommentId: props.currentCommentId // functions\n    ,\n    addArticleComment: addArticleComment,\n    addArticleCommentAnswer: addArticleCommentAnswer,\n    addAnswer: addAnswer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  });\n};\n\nlet mapStateToProps = state => {\n  return {\n    articles: state.articles.articles,\n    articleComments: state.articles.articleComments,\n    currentArticleId: state.articles.currentArticleId,\n    currentCommentId: state.articles.currentCommentId\n  };\n};\n\nexport default connect(mapStateToProps, {\n  uploadCurrentArticleComments,\n  uploadCurrentCommentId\n})(ArticleCommentsContainer);","map":{"version":3,"sources":["C:/Users/jassem/Desktop/hhh/client/src/components/BlogPage/BlogPageComponents/ArticleCommentsContainer.js"],"names":["React","connect","ArticleComments","uploadCurrentArticleComments","uploadCurrentCommentId","useHttp","ArticleCommentsContainer","props","request","addArticleComment","formData","articleOwner","currentArticleId","articleCommentsResponse","comments","parseInt","articles","plusLikeCounter","userName","CommentText","e","addArticleCommentAnswer","commentOwner","currentCommentId","addAnswer","currentTarget","id","articleComments","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SACEC,4BADF,EAEEC,sBAFF,QAGO,gCAHP;AAIA,SAASC,OAAT,QAAwB,0BAAxB;;AAEA,MAAMC,wBAAwB,GAAIC,KAAD,IAAW;AAC1C,QAAM;AAAEC,IAAAA;AAAF,MAAcH,OAAO,EAA3B;;AACA,QAAMI,iBAAiB,GAAG,MAAOC,QAAP,IAAoB;AAC5C,QAAI;AACF,YAAMF,OAAO,CAAC,oCAAD,EAAuC,MAAvC,EAA+C,EAC1D,GAAGE,QADuD;AAE1DC,QAAAA,YAAY,EAAEJ,KAAK,CAACK;AAFsC,OAA/C,CAAb;AAIA,YAAMC,uBAAuB,GAAG,MAAML,OAAO,CAC1C,oCAAmCD,KAAK,CAACK,gBAAiB,EADhB,EAE3C,KAF2C,EAG3C,IAH2C,CAA7C;AAKA,YAAME,QAAQ,GAAGC,QAAQ,CAACR,KAAK,CAACS,QAAN,CAAe,CAAf,EAAkBF,QAAnB,CAAzB;AACA,YAAMG,eAAe,GAAG,MAAMT,OAAO,CAAE,iBAAgBD,KAAK,CAACK,gBAAiB,EAAzC,EAA4C,OAA5C,EAAqD;AACxFE,QAAAA,QAAQ,EAAEA,QAAQ,GAAGA,QAAQ,GAAG,CAAd,GAAkB;AADoD,OAArD,CAArC;AAGAP,MAAAA,KAAK,CAACJ,4BAAN,CAAmCU,uBAAnC;AACAH,MAAAA,QAAQ,CAACQ,QAAT,GAAoB,EAApB;AACAR,MAAAA,QAAQ,CAACS,WAAT,GAAuB,EAAvB;AACD,KAjBD,CAiBE,OAAOC,CAAP,EAAU,CAAE;AACf,GAnBD;;AAqBA,QAAMC,uBAAuB,GAAG,MAAOX,QAAP,IAAoB;AAClD,QAAI;AACF,YAAMF,OAAO,CAAC,oCAAD,EAAuC,MAAvC,EAA+C,EAC1D,GAAGE,QADuD;AAE1DC,QAAAA,YAAY,EAAEJ,KAAK,CAACK,gBAFsC;AAG1DU,QAAAA,YAAY,EAAEf,KAAK,CAACgB;AAHsC,OAA/C,CAAb;AAKA,YAAMV,uBAAuB,GAAG,MAAML,OAAO,CAC1C,oCAAmCD,KAAK,CAACK,gBAAiB,EADhB,EAE3C,KAF2C,EAG3C,IAH2C,CAA7C;AAKA,YAAME,QAAQ,GAAGC,QAAQ,CAACR,KAAK,CAACS,QAAN,CAAe,CAAf,EAAkBF,QAAnB,CAAzB;AACA,YAAMG,eAAe,GAAG,MAAMT,OAAO,CAAE,iBAAgBD,KAAK,CAACK,gBAAiB,EAAzC,EAA4C,OAA5C,EAAqD;AACxFE,QAAAA,QAAQ,EAAEA,QAAQ,GAAGA,QAAQ,GAAG,CAAd,GAAkB;AADoD,OAArD,CAArC;AAGAP,MAAAA,KAAK,CAACJ,4BAAN,CAAmCU,uBAAnC;AACAN,MAAAA,KAAK,CAACH,sBAAN,CAA6B,IAA7B;AACD,KAjBD,CAiBE,OAAOgB,CAAP,EAAU,CAAE;AACf,GAnBD;;AAoBA,QAAMI,SAAS,GAAIJ,CAAD,IAAO;AACvBb,IAAAA,KAAK,CAACH,sBAAN,CAA6BgB,CAAC,CAACK,aAAF,CAAgBC,EAA7C;AACD,GAFD;;AAIA,sBACE,oBAAC,eAAD,CACE;AADF;AAEE,IAAA,eAAe,EAAEnB,KAAK,CAACoB,eAFzB;AAGE,IAAA,gBAAgB,EAAEpB,KAAK,CAACgB,gBAH1B,CAIE;AAJF;AAKE,IAAA,iBAAiB,EAAEd,iBALrB;AAME,IAAA,uBAAuB,EAAEY,uBAN3B;AAOE,IAAA,SAAS,EAAEG,SAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAWD,CA1DD;;AA4DA,IAAII,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACLb,IAAAA,QAAQ,EAAEa,KAAK,CAACb,QAAN,CAAeA,QADpB;AAELW,IAAAA,eAAe,EAAEE,KAAK,CAACb,QAAN,CAAeW,eAF3B;AAGLf,IAAAA,gBAAgB,EAAEiB,KAAK,CAACb,QAAN,CAAeJ,gBAH5B;AAILW,IAAAA,gBAAgB,EAAEM,KAAK,CAACb,QAAN,CAAeO;AAJ5B,GAAP;AAMD,CAPD;;AAQA,eAAetB,OAAO,CAAC2B,eAAD,EAAkB;AAAEzB,EAAAA,4BAAF;AAAgCC,EAAAA;AAAhC,CAAlB,CAAP,CACbE,wBADa,CAAf","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ArticleComments from \"./ArticleComments\";\r\nimport {\r\n  uploadCurrentArticleComments,\r\n  uploadCurrentCommentId,\r\n} from \"../../../Redux/ArticlesReducer\";\r\nimport { useHttp } from \"../../../hooks/http.hook\";\r\n\r\nconst ArticleCommentsContainer = (props) => {\r\n  const { request } = useHttp();\r\n  const addArticleComment = async (formData) => {\r\n    try {\r\n      await request(\"/api/articles/createArticleComment\", \"POST\", {\r\n        ...formData,\r\n        articleOwner: props.currentArticleId,\r\n      });\r\n      const articleCommentsResponse = await request(\r\n        `/api/articles/getArticleComments/${props.currentArticleId}`,\r\n        \"GET\",\r\n        null\r\n      );\r\n      const comments = parseInt(props.articles[0].comments);\r\n      const plusLikeCounter = await request(`/api/articles/${props.currentArticleId}`, \"PATCH\", {\r\n        comments: comments ? comments + 1 : 1,\r\n      });\r\n      props.uploadCurrentArticleComments(articleCommentsResponse);\r\n      formData.userName = \"\";\r\n      formData.CommentText = \"\";\r\n    } catch (e) {}\r\n  };\r\n\r\n  const addArticleCommentAnswer = async (formData) => {\r\n    try {\r\n      await request(\"/api/articles/createArticleComment\", \"POST\", {\r\n        ...formData,\r\n        articleOwner: props.currentArticleId,\r\n        commentOwner: props.currentCommentId,\r\n      });\r\n      const articleCommentsResponse = await request(\r\n        `/api/articles/getArticleComments/${props.currentArticleId}`,\r\n        \"GET\",\r\n        null\r\n      );\r\n      const comments = parseInt(props.articles[0].comments);\r\n      const plusLikeCounter = await request(`/api/articles/${props.currentArticleId}`, \"PATCH\", {\r\n        comments: comments ? comments + 1 : 1,\r\n      });\r\n      props.uploadCurrentArticleComments(articleCommentsResponse);\r\n      props.uploadCurrentCommentId(null);\r\n    } catch (e) {}\r\n  };\r\n  const addAnswer = (e) => {\r\n    props.uploadCurrentCommentId(e.currentTarget.id);\r\n  };\r\n\r\n  return (\r\n    <ArticleComments\r\n      // props\r\n      articleComments={props.articleComments}\r\n      currentCommentId={props.currentCommentId}\r\n      // functions\r\n      addArticleComment={addArticleComment}\r\n      addArticleCommentAnswer={addArticleCommentAnswer}\r\n      addAnswer={addAnswer}\r\n    />\r\n  );\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    articles: state.articles.articles,\r\n    articleComments: state.articles.articleComments,\r\n    currentArticleId: state.articles.currentArticleId,\r\n    currentCommentId: state.articles.currentCommentId,\r\n  };\r\n};\r\nexport default connect(mapStateToProps, { uploadCurrentArticleComments, uploadCurrentCommentId })(\r\n  ArticleCommentsContainer\r\n);\r\n"]},"metadata":{},"sourceType":"module"}